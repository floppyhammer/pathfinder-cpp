#version 430

precision highp float;

#ifdef GL_ES
precision highp sampler2D;
precision highp image2D;
#endif

layout(local_size_x = 16, local_size_y = 4) in;

#define TILE_FIELD_NEXT_TILE_ID             0u
#define TILE_FIELD_FIRST_FILL_ID            1u
#define TILE_FIELD_BACKDROP_ALPHA_TILE_ID   2u
#define TILE_FIELD_CONTROL                  3u

#define TILE_CTRL_MASK_MASK                     0x3
#define TILE_CTRL_MASK_WINDING                  0x1
#define TILE_CTRL_MASK_EVEN_ODD                 0x2
#define TILE_CTRL_MASK_0_SHIFT                  0

// No simultaneous image READ & WRITE for GLES.
#ifdef GL_ES
writeonly layout(rgba8, binding = 3) uniform image2D uDest;
#else
layout(rgba8, binding = 3) uniform image2D uDest;
#endif

layout(binding = 4) uniform sampler2D uAreaLUT;

layout(std140, binding = 5) uniform bUniform {
    ivec2 uAlphaTileRange;
    ivec2 uPad0;
};

// microlines_buffer
restrict readonly layout(std430, binding = 0) buffer bFills {
    uint iFills[];
};

// propagate_metadata_buffer
restrict readonly layout(std430, binding = 1) buffer bTiles {
    // [0]: path ID
    // [1]: next tile ID
    // [2]: first fill ID
    // [3]: backdrop delta upper 8 bits, alpha tile ID lower 24 bits
    // [4]: color/ctrl/backdrop word
    uint iTiles[];
};

// z_buffer
restrict readonly layout(std430, binding = 2) buffer bAlphaTiles {
    // [0]: alpha tile index
    // [1]: clip tile index
    uint iAlphaTiles[];
};

vec4 computeCoverage(vec2 from, vec2 to, sampler2D areaLUT) {
    // Determine winding, and sort into a consistent order so we only need to find one root below.
    vec2 left = from.x < to.x ? from : to, right = from.x < to.x ? to : from;

    // Shoot a vertical ray toward the curve.
    vec2 window = clamp(vec2(from.x, to.x), -0.5, 0.5);
    float offset = mix(window.x, window.y, 0.5) - left.x;

    // On-segment coordinate.
    float t = offset / (right.x - left.x);

    // Compute position and derivative to form a line approximation.
    float y = mix(left.y, right.y, t); // CHY: y position calculated from t.
    float d = (right.y - left.y) / (right.x - left.x); // CHY: Derivative of the segment.

    // Look up area under that line, and scale horizontally to the window size.
    float dX = window.x - window.y;

    // Return the color at the specific position in texture areaLUT.
    return texture(areaLUT, vec2(y + 8.0, abs(d * dX)) / 16.0) * dX;
}

vec4 accumulateCoverageForFillList(int fillIndex, ivec2 tileSubCoord) {
    vec2 tileFragCoord = vec2(tileSubCoord) + vec2(0.5);

    // This might be the coverage mask.
    vec4 coverages = vec4(0.0);

    int iteration = 0;
    do {
        // iFills[fillFrom, fillTo, ?, fillFrom, fillTo, ?, ...]
        // What is the third element?
        uint fillFrom = iFills[fillIndex * 3 + 0], fillTo = iFills[fillIndex * 3 + 1];

        // Pack: lineSegment = vec4(from.x, from.y, to.x, to.y).
        vec4 lineSegment = vec4(fillFrom & 0xffffu, fillFrom >> 16, fillTo & 0xffffu, fillTo >> 16) / 256.0;

        // Convert to tile's local coordinates.
        lineSegment -= tileFragCoord.xyxy;

        // Compute if this texel is covered by the fill?
        coverages += computeCoverage(lineSegment.xy, lineSegment.zw, uAreaLUT);

        fillIndex = int(iFills[fillIndex * 3 + 2]);

        iteration++;
    } while (fillIndex >= 0 && iteration < 1024);

    return coverages;
}

ivec2 computeTileCoord(uint alphaTileIndex) {
    uint x = alphaTileIndex & 0xffu;
    uint y = (alphaTileIndex >> 8u) & 0xffu + (((alphaTileIndex >> 16u) & 0xffu) << 8u);
    return ivec2(16, 4) * ivec2(x, y) + ivec2(gl_LocalInvocationID.xy);
}

/// Fill alpha tiles.
void main() {
    // Local coordinates out of local size (16, 4) * ivec2(1, 4).
    ivec2 tileSubCoord = ivec2(gl_LocalInvocationID.xy) * ivec2(1, 4);

    // This is a workaround for the 64K workgroup dispatch limit in OpenGL.
    uint batchAlphaTileIndex = (gl_WorkGroupID.x | (gl_WorkGroupID.y << 15));

    uint alphaTileIndex = batchAlphaTileIndex + uint(uAlphaTileRange.x);
    if (alphaTileIndex >= uint(uAlphaTileRange.y))
        return;

    uint tileIndex = iAlphaTiles[batchAlphaTileIndex * 2u + 0u];

    // |?(8bit)|x(24bit)| -> |0(8bit)|x(24bit)|
    if ((int(iTiles[tileIndex * 4u + TILE_FIELD_BACKDROP_ALPHA_TILE_ID] << 8) >> 8) < 0)
        return;

    int fillIndex = int(iTiles[tileIndex * 4u + TILE_FIELD_FIRST_FILL_ID]);
    uint tileControlWord = iTiles[tileIndex * 4u + TILE_FIELD_CONTROL];
    int backdrop = int(tileControlWord) >> 24;

    vec4 coverages = vec4(backdrop);
    coverages += accumulateCoverageForFillList(fillIndex, tileSubCoord);

    int tileCtrl = int((tileControlWord >> 16) & 0xffu);
    int maskCtrl = (tileCtrl >> TILE_CTRL_MASK_0_SHIFT) & TILE_CTRL_MASK_MASK;
    if ((maskCtrl & TILE_CTRL_MASK_WINDING) != 0) {
        coverages = clamp(abs(coverages), 0.0, 1.0);
    } else {
        coverages = clamp(1.0 - abs(1.0 - mod(coverages, 2.0)), 0.0, 1.0);
    }

    // Not available for GLES.
    #ifndef GL_ES
    // Handle clip if necessary.

    // clipTileIndex should be converted to int first, as it might be negative.
    int clipTileIndex = int(iAlphaTiles[batchAlphaTileIndex * 2u + 1u]);
    if (clipTileIndex >= 0) {
        coverages = min(coverages, imageLoad(uDest, computeTileCoord(uint(clipTileIndex))));
    }
    #endif

    imageStore(uDest, computeTileCoord(alphaTileIndex), coverages);
}
